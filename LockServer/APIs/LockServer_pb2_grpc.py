# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import APIs.LockServer_pb2 as LockServer__pb2


class LockServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Lock = channel.unary_unary(
                '/LockServer/Lock',
                request_serializer=LockServer__pb2.LockRequest.SerializeToString,
                response_deserializer=LockServer__pb2.LockResponse.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/LockServer/Unlock',
                request_serializer=LockServer__pb2.UnlockRequest.SerializeToString,
                response_deserializer=LockServer__pb2.UnlockResponse.FromString,
                )
        self.AddACL = channel.unary_unary(
                '/LockServer/AddACL',
                request_serializer=LockServer__pb2.AddACLRequest.SerializeToString,
                response_deserializer=LockServer__pb2.AddACLResponse.FromString,
                )
        self.AddFile = channel.unary_unary(
                '/LockServer/AddFile',
                request_serializer=LockServer__pb2.AddFileRequest.SerializeToString,
                response_deserializer=LockServer__pb2.AddFileResponse.FromString,
                )


class LockServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddACL(self, request, context):
        """rpc AddGroup(AddGroupRequest) returns (AddGroupResponse) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LockServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=LockServer__pb2.LockRequest.FromString,
                    response_serializer=LockServer__pb2.LockResponse.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=LockServer__pb2.UnlockRequest.FromString,
                    response_serializer=LockServer__pb2.UnlockResponse.SerializeToString,
            ),
            'AddACL': grpc.unary_unary_rpc_method_handler(
                    servicer.AddACL,
                    request_deserializer=LockServer__pb2.AddACLRequest.FromString,
                    response_serializer=LockServer__pb2.AddACLResponse.SerializeToString,
            ),
            'AddFile': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFile,
                    request_deserializer=LockServer__pb2.AddFileRequest.FromString,
                    response_serializer=LockServer__pb2.AddFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LockServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LockServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LockServer/Lock',
            LockServer__pb2.LockRequest.SerializeToString,
            LockServer__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LockServer/Unlock',
            LockServer__pb2.UnlockRequest.SerializeToString,
            LockServer__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddACL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LockServer/AddACL',
            LockServer__pb2.AddACLRequest.SerializeToString,
            LockServer__pb2.AddACLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LockServer/AddFile',
            LockServer__pb2.AddFileRequest.SerializeToString,
            LockServer__pb2.AddFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
